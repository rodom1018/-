[2022 2차 아이디어]
-trade off 에 대한 생각이 우선!!
뭘 얻으면 뭘 잃는지
얼마나 얻고 얼마나 잃는지에 대해
깊이있는 생각을 해야 한다. 

- 사용자의 대기 시간에 따라 diff 값에 가중치 부여 . 
0~15분을 wait_weight개의 구역으로 구분해 1~wait_weight의 값으로 diff를 나누신 분이 있는데
그냥 보정 계수 ( 많이 기다린 사람은 좀 더 널널한 기준으로 매칭 할 수 있게 ! ) 를 두어 계산해주는 것도 나쁘지 않을 것 같다.
예 : 유저 두명 비교 해서 (n2알고리즘이 될 듯함 )  오래 걸리는 매칭일수록 매칭 하도록 함 . 
다만 오래 기다린 유저는 조금 널널한 기준으로 매칭하게 수식을 보정하면 좋을 것 같다. 

*이 분 코드 좋은듯 ?
https://github.com/cpm0722/kakao-2022-round2/blob/master/solve.py

- 승률 별로 점수를 더/덜 깎는/올리는 방법도 좋을 듯하다
대신 초기 부터는 아니고 한 6판이나(n판?이거도 사실 알수가없다 ) 그 이상부터 적용되는 변수로 두면 좋을 것 같다 . 

- 블랙리스트 관련해서 
너무 플레이 타임이 낮은게 잦은 사람들은 
체크를 해놔서 그 이후에 10분 이하의 판은 점수 반영을 안 시켜 버려야겠다 . 
특히나 높은 플레이 타임 끼리 매칭을 시키는 방법을 쓰면
10분 이하는 거의 즉발기로 어뷰저일것이니까
횟수를 세는 것도 어느정도 좋은 방법이 될듯 !!

"""
지금까지의 풀이를 대략적으로 구현만 해도 2번 테스트 케이스의 경우 최상위권의 점수를 받을 수 있다.
그런데 1번 테스트 케이스의 경우 중하위의 점수에 그쳐서, 그 원인을 알아보았다.
 
스코어보드의 1번 테스트 케이스를 푼 대부분의 사람들이 거의 만점에 가까운 효율성을 보여주었다.
이는 유저가 매칭요청을 하면 기다림없이 즉시 매칭을 시켜주었다는 것을 의미한다. 실제로 총 유저가 30명 정도밖에 되지 않으므로, 안그래도 매칭을 할 수 있는 인원이 적은데 굳이 비슷한 실력의 유저를 찾을 필요가 없다. 이를 고쳐서 중상위권의 점수까지 올렸다.
"""
출처 : https://anz1217.tistory.com/140

"""
총 5시간의 코딩테스트 시간동안 뭔가 코딩하는 시간보다는 멍하니 실행되는 코드를 바라보는 시간이 더 많았다. 더 Pythonic한 코드를 짰다거나, 설계를 더 꼼꼼히 했으면 하는 아쉬움이 있었다.
"""
--> 일단 돌리고 